// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserType {
  ADMIN
  SUPERADMIN
  MANAGER
  USER
}

enum Status {
  ACTIVE
  INACTIVE
  BLOCKED
}

enum TransactionType {
  INCOME // Entrada de dinheiro (vendas, pagamentos)
  EXPENSE // Saída de dinheiro (despesas, custos)
}

enum StatusOrder {
  INLINE
  COMPLETED
  CANCELED
}

enum PaymentType {
  PIX
  CREDITCARD
  MONEY
}

enum StockMovementType {
  IN // Entrada de produto no estoque
  OUT // Saída de produto no estoque
  ADJUSTMENT // Ajustes manuais
}

enum CashMovementType {
  ENTRY // Entrada de dinheiro
  EXIT // Saída de dinheiro
}

enum AccountType {
  RECEIVABLE // Contas a receber (vendas a prazo, mensalidades)
  PAYABLE // Contas a pagar (aluguéis, fornecedores)
}

enum AccountStatus {
  PENDING
  PAID
  OVERDUE
}

enum AppointmentStatus {
  SCHEDULED
  CANCELED
  COMPLETED
}

model Tokens {
  id      String   @id @default(uuid())
  user_id String
  token   String   @unique
  valid   Boolean
  expires DateTime

  @@map("tokens")
}

model Plan {
  id          String     @id @default(uuid())
  title       String
  description String
  value       Int
  months      Int
  created_at  DateTime   @default(now())
  updated_at  DateTime   @updatedAt
  payments    Payments[]

  @@map("plans")
}

model User {
  id            String       @id @default(uuid())
  enterprise_id String?
  name          String
  document      String?
  password      String
  phone         String?
  email         String       @unique
  user_type     UserType     @default(USER)
  created_at    DateTime     @default(now())
  updated_at    DateTime     @updatedAt
  enterprise    Enterprise[]
  payments      Payments[]

  @@map("users")
}

model Enterprise {
  id                  String               @id @default(uuid())
  fantasy_name        String
  company_name        String?
  document            String?
  status              Status               @default(ACTIVE)
  payment_day         Int?
  finish_plan         DateTime?
  zip_code            String
  address             String
  number              String
  complement          String?
  region              String
  city                String
  state               String
  lat                 Float
  long                Float
  created_at          DateTime             @default(now())
  updated_at          DateTime             @updatedAt
  users               User[]
  services_enterprise ServicesEnterprise[]
  payments            Payments[]
  orders              Order[]

  @@map("enterprises")
}

model EnterpriseConfig {
  id              String   @id @default(uuid())
  logo_url        String?
  primary_color   String?
  secondary_color String?
  slogan          String?
  sales           Boolean  @default(true)
  financial       Boolean  @default(false)
  stock           Boolean  @default(false)
  scheduling      Boolean  @default(false)
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt

  @@map("enterprises_config")
}

model Payments {
  id                 String     @id @default(uuid())
  user_id            String
  plan_id            String
  enterprise_id      String
  transaction_id     BigInt
  transaction_amount Int
  type_payment       String
  status             String
  status_detail      String
  created_at         DateTime   @default(now())
  updated_at         DateTime   @updatedAt
  user               User       @relation(fields: [user_id], references: [id])
  plan               Plan       @relation(fields: [plan_id], references: [id])
  enterprise         Enterprise @relation(references: [id], fields: [enterprise_id])

  @@map("payments")
}

model ServicesEnterprise {
  id             String          @id @default(uuid())
  enterprise_id  String
  name           String
  value          Int
  stock_quantity Int             @default(0)
  minimum_stock  Int? // Estoque mínimo antes de alertar reposição
  created_at     DateTime        @default(now())
  updated_at     DateTime        @updatedAt
  enterprise     Enterprise      @relation(fields: [enterprise_id], references: [id])
  services_order ServicesOrder[]

  @@map("services_enterprise")
}

model Client {
  id            String   @id @default(uuid())
  enterprise_id String
  name          String
  document      String?  @unique
  phone         String
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt
  orders        Order[]

  @@map("clients")
}

model Order {
  id                String          @id @default(uuid())
  client_id         String?
  enterprise_id     String
  car_license_plate String
  payment_type      PaymentType?
  status            StatusOrder     @default(INLINE)
  total_value       Int
  created_at        DateTime        @default(now())
  updated_at        DateTime        @updatedAt
  client            Client?         @relation(fields: [client_id], references: [id])
  enterprise        Enterprise      @relation(fields: [enterprise_id], references: [id])
  services_order    ServicesOrder[]

  @@map("orders")
}

model ServicesOrder {
  id         String             @id @default(uuid())
  service_id String
  order_id   String
  value      Int
  created_at DateTime           @default(now())
  updated_at DateTime           @updatedAt
  service    ServicesEnterprise @relation(fields: [service_id], references: [id])
  order      Order              @relation(fields: [order_id], references: [id])

  @@map("services_order")
}
